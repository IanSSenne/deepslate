{"version":3,"file":"deepslate.umd.js","sources":["../src/math/noise/SimplexNoise.ts","../src/math/random/XoroshiroRandom.ts"],"sourcesContent":["import type { Random } from '../random'\r\n\r\nexport class SimplexNoise {\r\n\tprivate static readonly GRADIENT = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1], [1, 1, 0], [0, -1, 1], [-1, 1, 0], [0, -1, -1]]\r\n\tprivate static readonly F2 = 0.5 * (Math.sqrt(3.0) - 1.0)\r\n\tprivate static readonly G2 = (3.0 - Math.sqrt(3.0)) / 6.0\r\n\r\n\tpublic readonly p: number[]\r\n\tpublic readonly xo: number\r\n\tpublic readonly yo: number\r\n\tpublic readonly zo: number\r\n\r\n\tconstructor(random: Random) {\r\n\t\tthis.xo = random.nextDouble() * 256\r\n\t\tthis.yo = random.nextDouble() * 256\r\n\t\tthis.zo = random.nextDouble() * 256\r\n\t\tthis.p = Array(256)\r\n\r\n\t\tfor (let i = 0; i < 256; i += 1) {\r\n\t\t\tthis.p[i] = i\r\n\t\t}\r\n\t\tfor (let i = 0; i < 256; i += 1) {\r\n\t\t\tconst j = random.nextInt(256 - i)\r\n\t\t\tconst b = this.p[i]\r\n\t\t\tthis.p[i] = this.p[i + j]\r\n\t\t\tthis.p[i + j] = b\r\n\t\t}\r\n\t}\r\n\r\n\tpublic sample2D(d: number, d2: number) {\r\n\t\tlet d3\r\n\t\tlet n3\r\n\t\tlet d4\r\n\t\tconst d6 = (d + d2) * SimplexNoise.F2\r\n\t\tconst n4 = Math.floor(d + d6)\r\n\t\tconst d7 = n4 - (d3 = (n4 + (n3 = Math.floor(d2 + d6))) * SimplexNoise.G2)\r\n\t\tconst d8 = d - d7\r\n\t\tlet a\r\n\t\tlet b\r\n\t\tif (d8 > (d4 = d2 - (n3 - d3))) {\r\n\t\t\ta = 1\r\n\t\t\tb = 0\r\n\t\t} else {\r\n\t\t\ta = 0\r\n\t\t\tb = 1\r\n\t\t}\r\n\t\tconst d9 = d8 - a + SimplexNoise.G2\r\n\t\tconst d10 = d4 - b + SimplexNoise.G2\r\n\t\tconst d11 = d8 - 1.0 + 2.0 * SimplexNoise.G2\r\n\t\tconst d12 = d4 - 1.0 + 2.0 * SimplexNoise.G2\r\n\t\tconst n5 = n4 & 0xFF\r\n\t\tconst n6 = n3 & 0xFF\r\n\t\tconst n7 = this.P(n5 + this.P(n6)) % 12\r\n\t\tconst n8 = this.P(n5 + a + this.P(n6 + b)) % 12\r\n\t\tconst n9 = this.P(n5 + 1 + this.P(n6 + 1)) % 12\r\n\t\tconst d13 = this.getCornerNoise3D(n7, d8, d4, 0.0, 0.5)\r\n\t\tconst d14 = this.getCornerNoise3D(n8, d9, d10, 0.0, 0.5)\r\n\t\tconst d15 = this.getCornerNoise3D(n9, d11, d12, 0.0, 0.5)\r\n\t\treturn 70.0 * (d13 + d14 + d15)\r\n\t}\r\n\r\n\tpublic sample(x: number, y: number, z: number) {\r\n\t\tconst d5 = (x + y + z) * 0.3333333333333333\r\n\t\tconst x2 = Math.floor(x + d5)\r\n\t\tconst y2 = Math.floor(y + d5)\r\n\t\tconst z2 = Math.floor(z + d5)\r\n\t\tconst d7 = (x2 + y2 + z2) * 0.16666666666666666\r\n\t\tconst x3 = x - (x2 - d7)\r\n\t\tconst y3 = y - (y2 - d7)\r\n\t\tconst z3 = z - (z2 - d7)\r\n\t\tlet a\r\n\t\tlet b\r\n\t\tlet c\r\n\t\tlet d\r\n\t\tlet e\r\n\t\tlet f\r\n\t\tif (x3 >= y3) {\r\n\t\t\tif (y3 >= z3) {\r\n\t\t\t\ta = 1\r\n\t\t\t\tb = 0\r\n\t\t\t\tc = 0\r\n\t\t\t\td = 1\r\n\t\t\t\te = 1\r\n\t\t\t\tf = 0\r\n\t\t\t} else if (x3 >= z3) {\r\n\t\t\t\ta = 1\r\n\t\t\t\tb = 0\r\n\t\t\t\tc = 0\r\n\t\t\t\td = 1\r\n\t\t\t\te = 0\r\n\t\t\t\tf = 1\r\n\t\t\t} else {\r\n\t\t\t\ta = 0\r\n\t\t\t\tb = 0\r\n\t\t\t\tc = 1\r\n\t\t\t\td = 1\r\n\t\t\t\te = 0\r\n\t\t\t\tf = 1\r\n\t\t\t}\r\n\t\t} else if (y3 < z3) {\r\n\t\t\ta = 0\r\n\t\t\tb = 0\r\n\t\t\tc = 1\r\n\t\t\td = 0\r\n\t\t\te = 1\r\n\t\t\tf = 1\r\n\t\t} else if (x3 < z3) {\r\n\t\t\ta = 0\r\n\t\t\tb = 1\r\n\t\t\tc = 0\r\n\t\t\td = 0\r\n\t\t\te = 1\r\n\t\t\tf = 1\r\n\t\t} else {\r\n\t\t\ta = 0\r\n\t\t\tb = 1\r\n\t\t\tc = 0\r\n\t\t\td = 1\r\n\t\t\te = 1\r\n\t\t\tf = 0\r\n\t\t}\r\n\t\tconst x4 = x3 - a + 0.16666666666666666\r\n\t\tconst y4 = y3 - b + 0.16666666666666666\r\n\t\tconst z4 = z3 - c + 0.16666666666666666\r\n\t\tconst x5 = x3 - d + 0.3333333333333333\r\n\t\tconst y5 = y3 - e + 0.3333333333333333\r\n\t\tconst z5 = z3 - f + 0.3333333333333333\r\n\t\tconst x6 = x3 - 0.5\r\n\t\tconst y6 = y3 - 0.5\r\n\t\tconst z6 = z3 - 0.5\r\n\t\tconst x7 = x2 & 0xFF\r\n\t\tconst y7 = y2 & 0xFF\r\n\t\tconst z7 = z2 & 0xFF\r\n\t\tconst g = this.P(x7 + this.P(y7 + this.P(z7))) % 12\r\n\t\tconst h = this.P(x7 + a + this.P(y7 + b + this.P(z7 + c))) % 12\r\n\t\tconst i = this.P(x7 + d + this.P(y7 + e + this.P(z7 + f))) % 12\r\n\t\tconst j = this.P(x7 + 1 + this.P(y7 + 1 + this.P(z7 + 1))) % 12\r\n\t\tconst k = this.getCornerNoise3D(g, x3, y3, z3, 0.6)\r\n\t\tconst l = this.getCornerNoise3D(h, x4, y4, z4, 0.6)\r\n\t\tconst m = this.getCornerNoise3D(i, x5, y5, z5, 0.6)\r\n\t\tconst n = this.getCornerNoise3D(j, x6, y6, z6, 0.6)\r\n\t\treturn 32.0 * (k + l + m + n)\r\n\t}\r\n\r\n\tprivate P(i: number) {\r\n\t\treturn this.p[i & 0xFF]\r\n\t}\r\n\r\n\tprivate getCornerNoise3D(i: number, a: number, b: number, c: number, d: number) {\r\n\t\tlet f\r\n\t\tlet e = d - a * a - b * b - c * c\r\n\t\tif (e < 0.0) {\r\n\t\t\tf = 0.0\r\n\t\t} else {\r\n\t\t\te *= e\r\n\t\t\tf = e * e * SimplexNoise.gradDot(i, a, b, c)\r\n\t\t}\r\n\t\treturn f\r\n\t}\r\n\r\n\tpublic static gradDot(a: number, b: number, c: number, d: number) {\r\n\t\tconst grad = SimplexNoise.GRADIENT[a & 15]\r\n\t\treturn grad[0] * b + grad[1] * c + grad[2] * d\r\n\t}\r\n}\r\n","import type { Random } from \"./Random\";\r\n\r\nexport class XoroshiroRandom implements Random {\r\n  private static readonly SILVER_RATIO_64 = BigInt(\"7640891576956012809\");\r\n  private static readonly GOLDEN_RATIO_64 = BigInt(\"-7046029254386353131\");\r\n  private static readonly FLOAT_MULTIPLIER = 1 / Math.pow(2, 24);\r\n  private static readonly DOUBLE_MULTIPLIER = 1.1102230246251565e-16;\r\n\r\n  private static readonly BIGINT_1 = BigInt(1);\r\n  private static readonly BIGINT_17 = BigInt(17);\r\n  private static readonly BIGINT_21 = BigInt(21);\r\n  private static readonly BIGINT_27 = BigInt(27);\r\n  private static readonly BIGINT_28 = BigInt(28);\r\n  private static readonly BIGINT_30 = BigInt(30);\r\n  private static readonly BIGINT_31 = BigInt(31);\r\n  private static readonly BIGINT_32 = BigInt(32);\r\n  private static readonly BIGINT_49 = BigInt(49);\r\n  private static readonly BIGINT_64 = BigInt(64);\r\n  private static readonly STAFFORD_1 = BigInt(\"-4658895280553007687\");\r\n  private static readonly STAFFORD_2 = BigInt(\"-7723592293110705685\");\r\n  private static readonly MAX_ULONG = BigInt(\"0xFFFFFFFFFFFFFFFF\");\r\n  private static readonly POW2_60 = BigInt(\"0x10000000000000000\");\r\n  private static readonly POW2_63 = BigInt(\"0x8000000000000000\");\r\n  private static readonly MAX_UINT = BigInt(0xffffffff);\r\n\r\n  private seed: [bigint, bigint] = [BigInt(0), BigInt(0)];\r\n\r\n  constructor(seed: [bigint, bigint]) {\r\n    this.seed = seed;\r\n  }\r\n\r\n  public static create(seed: bigint) {\r\n    return new XoroshiroRandom(XoroshiroRandom.upgradeSeedTo128bit(seed));\r\n  }\r\n\r\n  private static mixStafford13(value: bigint): bigint {\r\n    value =\r\n      ((value ^ (value >> XoroshiroRandom.BIGINT_30)) *\r\n        XoroshiroRandom.STAFFORD_1) &\r\n      XoroshiroRandom.MAX_ULONG;\r\n    value =\r\n      ((value ^ (value >> XoroshiroRandom.BIGINT_27)) *\r\n        XoroshiroRandom.STAFFORD_2) &\r\n      XoroshiroRandom.MAX_ULONG;\r\n    return (\r\n      (value ^ (value >> XoroshiroRandom.BIGINT_31)) & XoroshiroRandom.MAX_ULONG\r\n    );\r\n  }\r\n\r\n  private static upgradeSeedTo128bit(seed: bigint): [bigint, bigint] {\r\n    if (seed < 0) {\r\n      seed += XoroshiroRandom.POW2_60;\r\n    }\r\n    const seedLo = seed ^ XoroshiroRandom.SILVER_RATIO_64;\r\n    const seedHi =\r\n      (seedLo + XoroshiroRandom.GOLDEN_RATIO_64) & XoroshiroRandom.MAX_ULONG;\r\n    return [\r\n      XoroshiroRandom.mixStafford13(seedLo),\r\n      XoroshiroRandom.mixStafford13(seedHi),\r\n    ];\r\n  }\r\n\r\n  public static rotateLeft(value: bigint, shift: bigint): bigint {\r\n    return (\r\n      ((value << shift) & XoroshiroRandom.MAX_ULONG) |\r\n      (value >> (XoroshiroRandom.BIGINT_64 - shift))\r\n    );\r\n  }\r\n\r\n  setSeed(seed: bigint) {\r\n    this.seed = XoroshiroRandom.upgradeSeedTo128bit(seed);\r\n  }\r\n\r\n  public fork() {\r\n    return new XoroshiroRandom([this.next(), this.next()]);\r\n  }\r\n\r\n  // public forkPositional() {\r\n  // \treturn new XoroshiroPositionalRandom(this.next(), this.next())\r\n  // }\r\n\r\n  public next(): bigint {\r\n    const seedLo = this.seed[0];\r\n    let seedHi = this.seed[1];\r\n    const value =\r\n      (XoroshiroRandom.rotateLeft(\r\n        (seedLo + seedHi) & XoroshiroRandom.MAX_ULONG,\r\n        XoroshiroRandom.BIGINT_17\r\n      ) +\r\n        seedLo) &\r\n      XoroshiroRandom.MAX_ULONG;\r\n\r\n    seedHi ^= seedLo;\r\n    this.seed = [\r\n      XoroshiroRandom.rotateLeft(seedLo, XoroshiroRandom.BIGINT_49) ^\r\n        seedHi ^\r\n        ((seedHi << XoroshiroRandom.BIGINT_21) & XoroshiroRandom.MAX_ULONG),\r\n      XoroshiroRandom.rotateLeft(seedHi, XoroshiroRandom.BIGINT_28),\r\n    ];\r\n\r\n    return value;\r\n  }\r\n\r\n  public nextLong(): bigint {\r\n    let value = this.next();\r\n\r\n    if (value > XoroshiroRandom.POW2_63) value -= XoroshiroRandom.POW2_60;\r\n\r\n    return value;\r\n  }\r\n\r\n  public consume(count: number) {\r\n    let seedLo = this.seed[0];\r\n    let seedHi = this.seed[1];\r\n    for (let i = 0; i < count; i += 1) {\r\n      seedHi ^= seedLo;\r\n      seedLo =\r\n        XoroshiroRandom.rotateLeft(seedLo, XoroshiroRandom.BIGINT_49) ^\r\n        seedHi ^\r\n        (seedHi << XoroshiroRandom.BIGINT_21);\r\n      seedHi = XoroshiroRandom.rotateLeft(seedHi, XoroshiroRandom.BIGINT_28);\r\n    }\r\n\r\n    this.seed = [seedLo, seedHi];\r\n  }\r\n\r\n  private nextBits(bits: number) {\r\n    return this.next() >> BigInt(64 - bits);\r\n  }\r\n\r\n  public nextInt(max?: number): number {\r\n    let value = this.next() & XoroshiroRandom.MAX_UINT;\r\n    if (!max) {\r\n      let result = Number(value);\r\n      if (result >= 0x80000000) {\r\n        result -= 0x100000000;\r\n      }\r\n\r\n      return result;\r\n    } else {\r\n      const maxBigint = BigInt(max);\r\n      let product = value * maxBigint;\r\n      let productLo = product & XoroshiroRandom.MAX_UINT;\r\n      if (productLo < maxBigint) {\r\n        const newMax =\r\n          ((~maxBigint & XoroshiroRandom.MAX_UINT) + XoroshiroRandom.BIGINT_1) %\r\n          maxBigint;\r\n        while (productLo < newMax) {\r\n          value = this.next() & XoroshiroRandom.MAX_UINT;\r\n          product = value * maxBigint;\r\n          productLo = product & XoroshiroRandom.MAX_UINT;\r\n        }\r\n      }\r\n\r\n      const productHi = product >> XoroshiroRandom.BIGINT_32;\r\n      return Number(productHi);\r\n    }\r\n  }\r\n\r\n  public nextFloat(): number {\r\n    return Number(this.nextBits(24)) * XoroshiroRandom.FLOAT_MULTIPLIER;\r\n  }\r\n\r\n  public nextDouble(): number {\r\n    return Number(this.nextBits(53)) * XoroshiroRandom.DOUBLE_MULTIPLIER;\r\n  }\r\n\r\n  public parityConfigString(): string {\r\n    return \"seedLo: \" + this.seed[0] + \", seedHi: \" + this.seed[1];\r\n  }\r\n}\r\n\r\n// export class XoroshiroPositionalRandom implements PositionalRandom {\r\n// \tconstructor(\r\n// \t\tprivate readonly seedLo: bigint,\r\n// \t\tprivate readonly seedHi: bigint,\r\n// \t) {}\r\n\r\n// \tpublic at(x: number, y: number, z: number) {\r\n// \t\tconst positionSeed = getSeed(x, y, z)\r\n// \t\tconst seedLo = positionSeed ^ this.seedLo\r\n// \t\treturn new XoroshiroRandom([seedLo, this.seedHi])\r\n// \t}\r\n\r\n// \tpublic fromHashOf(name: string) {\r\n// \t\tconst hash = md5(name, { asBytes: true })\r\n// \t\tconst lo = longfromBytes(hash[0], hash[1], hash[2], hash[3], hash[4], hash[5], hash[6], hash[7])\r\n// \t\tconst hi = longfromBytes(hash[8], hash[9], hash[10], hash[11], hash[12], hash[13], hash[14], hash[15])\r\n// \t\treturn new XoroshiroRandom([lo ^ this.seedLo, hi ^ this.seedHi])\r\n// \t}\r\n\r\n// \tpublic seedKey(): [bigint, bigint] {\r\n// \t\treturn [this.seedLo, this.seedHi]\r\n// \t}\r\n// }\r\n"],"names":["_SimplexNoise","constructor","random","this","xo","nextDouble","yo","zo","p","Array","i","j","nextInt","b","sample2D","d","d2","d3","n3","d4","d6","F2","n4","Math","floor","d8","G2","a","d9","d10","d11","d12","n5","n6","n7","P","n8","n9","getCornerNoise3D","sample","x","y","z","d5","x2","y2","z2","d7","x3","y3","z3","c","e","f","x4","y4","z4","x5","y5","z5","x6","y6","z6","x7","y7","z7","g","h","gradDot","static","grad","GRADIENT","SimplexNoise","sqrt","_XoroshiroRandom","seed","BigInt","upgradeSeedTo128bit","value","BIGINT_30","STAFFORD_1","MAX_ULONG","BIGINT_27","STAFFORD_2","BIGINT_31","POW2_60","seedLo","SILVER_RATIO_64","seedHi","GOLDEN_RATIO_64","mixStafford13","shift","BIGINT_64","setSeed","fork","next","rotateLeft","BIGINT_17","BIGINT_49","BIGINT_21","BIGINT_28","nextLong","POW2_63","consume","count","nextBits","bits","max","MAX_UINT","maxBigint","product","productLo","newMax","BIGINT_1","productHi","BIGINT_32","Number","result","nextFloat","FLOAT_MULTIPLIER","DOUBLE_MULTIPLIER","parityConfigString","XoroshiroRandom","pow"],"mappings":"iPAAA,MAAMA,EAAgB,MACpBC,YAAYC,GACVC,KAAKC,GAA2B,IAAtBF,EAAOG,aACjBF,KAAKG,GAA2B,IAAtBJ,EAAOG,aACjBF,KAAKI,GAA2B,IAAtBL,EAAOG,aACjBF,KAAKK,EAAIC,MAAM,KACf,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAC5BP,KAAKK,EAAEE,GAAKA,EAEd,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAAG,CAC/B,MAAMC,EAAIT,EAAOU,QAAQ,IAAMF,GACzBG,EAAIV,KAAKK,EAAEE,GACjBP,KAAKK,EAAEE,GAAKP,KAAKK,EAAEE,EAAIC,GACvBR,KAAKK,EAAEE,EAAIC,GAAKE,GAGpBC,SAASC,EAAGC,GACV,IAAIC,EACAC,EACAC,EACJ,MAAMC,GAAML,EAAIC,GAAMhB,EAAcqB,GAC9BC,EAAKC,KAAKC,MAAMT,EAAIK,GAEpBK,EAAKV,GADAO,GAAML,GAAMK,GAAMJ,EAAKK,KAAKC,MAAMR,EAAKI,KAAQpB,EAAc0B,KAExE,IAAIC,EACAd,EACAY,GAAMN,EAAKH,GAAME,EAAKD,KACxBU,EAAI,EACJd,EAAI,IAEJc,EAAI,EACJd,EAAI,GAEN,MAAMe,EAAKH,EAAKE,EAAI3B,EAAc0B,GAC5BG,EAAMV,EAAKN,EAAIb,EAAc0B,GAC7BI,EAAML,EAAK,EAAI,EAAIzB,EAAc0B,GACjCK,EAAMZ,EAAK,EAAI,EAAInB,EAAc0B,GACjCM,EAAU,IAALV,EACLW,EAAU,IAALf,EACLgB,EAAK/B,KAAKgC,EAAEH,EAAK7B,KAAKgC,EAAEF,IAAO,GAC/BG,EAAKjC,KAAKgC,EAAEH,EAAKL,EAAIxB,KAAKgC,EAAEF,EAAKpB,IAAM,GACvCwB,EAAKlC,KAAKgC,EAAEH,EAAK,EAAI7B,KAAKgC,EAAEF,EAAK,IAAM,GAI7C,OAAO,IAHK9B,KAAKmC,iBAAiBJ,EAAIT,EAAIN,EAAI,EAAG,IACrChB,KAAKmC,iBAAiBF,EAAIR,EAAIC,EAAK,EAAG,IACtC1B,KAAKmC,iBAAiBD,EAAIP,EAAKC,EAAK,EAAG,KAGrDQ,OAAOC,EAAGC,EAAGC,GACX,MAAMC,EAAmB,mBAAbH,EAAIC,EAAIC,GACdE,EAAKrB,KAAKC,MAAMgB,EAAIG,GACpBE,EAAKtB,KAAKC,MAAMiB,EAAIE,GACpBG,EAAKvB,KAAKC,MAAMkB,EAAIC,GACpBI,EAAsB,oBAAhBH,EAAKC,EAAKC,GAChBE,EAAKR,GAAKI,EAAKG,GACfE,EAAKR,GAAKI,EAAKE,GACfG,EAAKR,GAAKI,EAAKC,GACrB,IAAIpB,EACAd,EACAsC,EACApC,EACAqC,EACAC,EACAL,GAAMC,EACJA,GAAMC,GACRvB,EAAI,EACJd,EAAI,EACJsC,EAAI,EACJpC,EAAI,EACJqC,EAAI,EACJC,EAAI,GACKL,GAAME,GACfvB,EAAI,EACJd,EAAI,EACJsC,EAAI,EACJpC,EAAI,EACJqC,EAAI,EACJC,EAAI,IAEJ1B,EAAI,EACJd,EAAI,EACJsC,EAAI,EACJpC,EAAI,EACJqC,EAAI,EACJC,EAAI,GAEGJ,EAAKC,GACdvB,EAAI,EACJd,EAAI,EACJsC,EAAI,EACJpC,EAAI,EACJqC,EAAI,EACJC,EAAI,GACKL,EAAKE,GACdvB,EAAI,EACJd,EAAI,EACJsC,EAAI,EACJpC,EAAI,EACJqC,EAAI,EACJC,EAAI,IAEJ1B,EAAI,EACJd,EAAI,EACJsC,EAAI,EACJpC,EAAI,EACJqC,EAAI,EACJC,EAAI,GAEN,MAAMC,EAAKN,EAAKrB,EAAI,mBACd4B,EAAKN,EAAKpC,EAAI,mBACd2C,EAAKN,EAAKC,EAAI,mBACdM,EAAKT,EAAKjC,EAAI,kBACd2C,EAAKT,EAAKG,EAAI,kBACdO,EAAKT,EAAKG,EAAI,kBACdO,EAAKZ,EAAK,GACVa,EAAKZ,EAAK,GACVa,EAAKZ,EAAK,GACVa,EAAU,IAALnB,EACLoB,EAAU,IAALnB,EACLoB,EAAU,IAALnB,EACLoB,EAAI/D,KAAKgC,EAAE4B,EAAK5D,KAAKgC,EAAE6B,EAAK7D,KAAKgC,EAAE8B,KAAQ,GAC3CE,EAAIhE,KAAKgC,EAAE4B,EAAKpC,EAAIxB,KAAKgC,EAAE6B,EAAKnD,EAAIV,KAAKgC,EAAE8B,EAAKd,KAAO,GACvDzC,EAAIP,KAAKgC,EAAE4B,EAAKhD,EAAIZ,KAAKgC,EAAE6B,EAAKZ,EAAIjD,KAAKgC,EAAE8B,EAAKZ,KAAO,GACvD1C,EAAIR,KAAKgC,EAAE4B,EAAK,EAAI5D,KAAKgC,EAAE6B,EAAK,EAAI7D,KAAKgC,EAAE8B,EAAK,KAAO,GAK7D,OAAO,IAJG9D,KAAKmC,iBAAiB4B,EAAGlB,EAAIC,EAAIC,EAAI,IACrC/C,KAAKmC,iBAAiB6B,EAAGb,EAAIC,EAAIC,EAAI,IACrCrD,KAAKmC,iBAAiB5B,EAAG+C,EAAIC,EAAIC,EAAI,IACrCxD,KAAKmC,iBAAiB3B,EAAGiD,EAAIC,EAAIC,EAAI,KAGjD3B,EAAEzB,GACA,OAAOP,KAAKK,EAAM,IAAJE,GAEhB4B,iBAAiB5B,EAAGiB,EAAGd,EAAGsC,EAAGpC,GAC3B,IAAIsC,EACAD,EAAIrC,EAAIY,EAAIA,EAAId,EAAIA,EAAIsC,EAAIA,EAOhC,OANIC,EAAI,EACNC,EAAI,GAEJD,GAAKA,EACLC,EAAID,EAAIA,EAAIpD,EAAcoE,QAAQ1D,EAAGiB,EAAGd,EAAGsC,IAEtCE,EAETgB,eAAe1C,EAAGd,EAAGsC,EAAGpC,GACtB,MAAMuD,EAAOtE,EAAcuE,SAAa,GAAJ5C,GACpC,OAAO2C,EAAK,GAAKzD,EAAIyD,EAAK,GAAKnB,EAAImB,EAAK,GAAKvD,IAGtC,IAAAyD,EAAexE,EAC1BwE,EAAaD,SAAW,CAAC,CAAC,EAAG,EAAG,GAAI,EAAE,EAAG,EAAG,GAAI,CAAC,GAAI,EAAG,GAAI,EAAE,GAAI,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,EAAE,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,GAAI,EAAE,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,EAAG,GAAI,CAAC,EAAG,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,EAAG,GAAI,EAAE,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,IACrNC,EAAanD,GAAK,IAAOE,KAAKkD,KAAK,GAAK,GACxCD,EAAa9C,IAAM,EAAIH,KAAKkD,KAAK,IAAM,ECvJvC,MAAMC,EAAmB,MACvBzE,YAAY0E,GACVxE,KAAKwE,KAAO,CAACC,OAAO,GAAIA,OAAO,IAC/BzE,KAAKwE,KAAOA,EAEdN,cAAcM,GACZ,OAAO,IAAID,EAAiBA,EAAiBG,oBAAoBF,IAEnEN,qBAAqBS,GAGnB,QADAA,IADAA,GAASA,EAAQA,GAASJ,EAAiBK,WAAaL,EAAiBM,WAAaN,EAAiBO,WACtFH,GAASJ,EAAiBQ,WAAaR,EAAiBS,WAAaT,EAAiBO,WACvFH,GAASJ,EAAiBU,WAAaV,EAAiBO,UAE1EZ,2BAA2BM,GACrBA,EAAO,IACTA,GAAQD,EAAiBW,SAE3B,MAAMC,EAASX,EAAOD,EAAiBa,gBACjCC,EAASF,EAASZ,EAAiBe,gBAAkBf,EAAiBO,UAC5E,MAAO,CACLP,EAAiBgB,cAAcJ,GAC/BZ,EAAiBgB,cAAcF,IAGnCnB,kBAAkBS,EAAOa,GACvB,OAAOb,GAASa,EAAQjB,EAAiBO,UAAYH,GAASJ,EAAiBkB,UAAYD,EAE7FE,QAAQlB,GACNxE,KAAKwE,KAAOD,EAAiBG,oBAAoBF,GAEnDmB,OACE,OAAO,IAAIpB,EAAiB,CAACvE,KAAK4F,OAAQ5F,KAAK4F,SAEjDA,OACE,MAAMT,EAASnF,KAAKwE,KAAK,GACzB,IAAIa,EAASrF,KAAKwE,KAAK,GACvB,MAAMG,EAAQJ,EAAiBsB,WAAWV,EAASE,EAASd,EAAiBO,UAAWP,EAAiBuB,WAAaX,EAASZ,EAAiBO,UAMhJ,OALAO,GAAUF,EACVnF,KAAKwE,KAAO,CACVD,EAAiBsB,WAAWV,EAAQZ,EAAiBwB,WAAaV,EAASA,GAAUd,EAAiByB,UAAYzB,EAAiBO,UACnIP,EAAiBsB,WAAWR,EAAQd,EAAiB0B,YAEhDtB,EAETuB,WACE,IAAIvB,EAAQ3E,KAAK4F,OAGjB,OAFIjB,EAAQJ,EAAiB4B,UAC3BxB,GAASJ,EAAiBW,SACrBP,EAETyB,QAAQC,GACN,IAAIlB,EAASnF,KAAKwE,KAAK,GACnBa,EAASrF,KAAKwE,KAAK,GACvB,IAAK,IAAIjE,EAAI,EAAGA,EAAI8F,EAAO9F,GAAK,EAC9B8E,GAAUF,EACVA,EAASZ,EAAiBsB,WAAWV,EAAQZ,EAAiBwB,WAAaV,EAASA,GAAUd,EAAiByB,UAC/GX,EAASd,EAAiBsB,WAAWR,EAAQd,EAAiB0B,WAEhEjG,KAAKwE,KAAO,CAACW,EAAQE,GAEvBiB,SAASC,GACP,OAAOvG,KAAK4F,QAAUnB,OAAO,GAAK8B,GAEpC9F,QAAQ+F,GACN,IAAI7B,EAAQ3E,KAAK4F,OAASrB,EAAiBkC,SAC3C,GAAKD,EAME,CACL,MAAME,EAAYjC,OAAO+B,GACzB,IAAIG,EAAUhC,EAAQ+B,EAClBE,EAAYD,EAAUpC,EAAiBkC,SAC3C,GAAIG,EAAYF,EAAW,CACzB,MAAMG,KAAYH,EAAYnC,EAAiBkC,UAAYlC,EAAiBuC,UAAYJ,EACxF,KAAOE,EAAYC,GACjBlC,EAAQ3E,KAAK4F,OAASrB,EAAiBkC,SACvCE,EAAUhC,EAAQ+B,EAClBE,EAAYD,EAAUpC,EAAiBkC,SAG3C,MAAMM,EAAYJ,GAAWpC,EAAiByC,UAC9C,OAAOC,OAAOF,GAnBN,CACR,IAAIG,EAASD,OAAOtC,GAIpB,OAHIuC,GAAU,aACZA,GAAU,YAELA,GAiBXC,YACE,OAAOF,OAAOjH,KAAKsG,SAAS,KAAO/B,EAAiB6C,iBAEtDlH,aACE,OAAO+G,OAAOjH,KAAKsG,SAAS,KAAO/B,EAAiB8C,kBAEtDC,qBACE,MAAO,WAAatH,KAAKwE,KAAK,GAAK,aAAexE,KAAKwE,KAAK,KAGrD,IAAA+C,EAAkBhD,EAC7BgD,EAAgBnC,gBAAkBX,OAAO,uBACzC8C,EAAgBjC,gBAAkBb,OAAO,wBACzC8C,EAAgBH,iBAAmB,EAAIhG,KAAKoG,IAAI,EAAG,IACnDD,EAAgBF,kBAAoB,sBACpCE,EAAgBT,SAAWrC,OAAO,GAClC8C,EAAgBzB,UAAYrB,OAAO,IACnC8C,EAAgBvB,UAAYvB,OAAO,IACnC8C,EAAgBxC,UAAYN,OAAO,IACnC8C,EAAgBtB,UAAYxB,OAAO,IACnC8C,EAAgB3C,UAAYH,OAAO,IACnC8C,EAAgBtC,UAAYR,OAAO,IACnC8C,EAAgBP,UAAYvC,OAAO,IACnC8C,EAAgBxB,UAAYtB,OAAO,IACnC8C,EAAgB9B,UAAYhB,OAAO,IACnC8C,EAAgB1C,WAAaJ,OAAO,wBACpC8C,EAAgBvC,WAAaP,OAAO,wBACpC8C,EAAgBzC,UAAYL,OAAO,sBACnC8C,EAAgBrC,QAAUT,OAAO,uBACjC8C,EAAgBpB,QAAU1B,OAAO,sBACjC8C,EAAgBd,SAAWhC,OAAO"}